{
    "level1": {
        "questionArray":  [
                      {
                          "id":  1,
                          "isSolve":  0,
                          "questions":  "Declare an int variable age = 18 and print it.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:1",
                                            "var:age"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  2,
                          "isSolve":  0,
                          "questions":  "Create a String variable with your name and print it.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:string"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  3,
                          "isSolve":  0,
                          "questions":  "Print: 'I am learning Java!' using a variable with a String data type.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:string",
                                            "literal:I am learning Java!"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  4,
                          "isSolve":  0,
                          "questions":  "Declare two int variables a = 5, b = 10 and print them.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "var:a",
                                            "var:b"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  5,
                          "isSolve":  0,
                          "questions":  "Print: 'My favorite number is *blank*' using a variable named favNum.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:1",
                                            "var:favNum"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  6,
                          "isSolve":  0,
                          "questions":  "Print two variables (firstName containing Mike, lastName containing Oxmaul) together as full name.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:string:2",
                                            "var:firstName",
                                            "var:lastName",
                                            "format:full_name"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  7,
                          "isSolve":  0,
                          "questions":  "Store the year 2004 in a variable named year and print it.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:1",
                                            "var:year",
                                            "literal:2004"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  8,
                          "isSolve":  0,
                          "questions":  "Declare a variable city and print: I live in Philippines.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:string",
                                            "var:city",
                                            "literal:Philippines"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  9,
                          "isSolve":  0,
                          "questions":  "Print: 'Java is fun!' using a variable.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:string",
                                            "literal:Java is fun!"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  10,
                          "isSolve":  0,
                          "questions":  "Print: 'Hello, my name is Nathaniel, and I am 21 years old.' using variables for name and age.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:string",
                                            "needs:int:1",
                                            "var:name",
                                            "var:age",
                                            "literal:Hello, my name is",
                                            "literal:years old"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  11,
                          "isSolve":  0,
                          "questions":  "Print the same number twice using two different variables.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "constraint:same_value"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  12,
                          "isSolve":  0,
                          "questions":  "Store the value 'Deez Nuts' in a variable named favoriteFood and print it.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:string",
                                            "var:favoriteFood",
                                            "literal:Deez Nuts"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  13,
                          "isSolve":  0,
                          "questions":  "Create a variable named letter with a char data type and place the value â€˜Aâ€™ inside it and print it.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:char",
                                            "var:letter",
                                            "literal:A"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  14,
                          "isSolve":  0,
                          "questions":  "Store a double variable named price and place 9.99 inside it and print it.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:double",
                                            "var:price",
                                            "literal:9.99"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  15,
                          "isSolve":  0,
                          "questions":  "Print the message: 'The price is: 9.99' using a variable.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:double|float|string",
                                            "literal:The price is:",
                                            "literal:9.99"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  16,
                          "isSolve":  0,
                          "questions":  "Print this sentence using two variables: 'Corebringer is a great game, and I will recommend it to my friends.'",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:string:2",
                                            "literal:Corebringer is a great game",
                                            "literal:recommend it to my friends"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  17,
                          "isSolve":  0,
                          "questions":  "Declare a variable for your school's name (full name of STI which is Systems Technology Institute) and print it.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:string",
                                            "var:schoolName",
                                            "literal:Systems Technology Institute"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  18,
                          "isSolve":  0,
                          "questions":  "Declare two String variables and print them in the same line.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:string:2",
                                            "format:same_line"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  19,
                          "isSolve":  0,
                          "questions":  "Print your age initialized from a variable named age and add it to a message to print: 'I am 18 years old and young, not old.'",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:1",
                                            "needs:string",
                                            "var:age",
                                            "literal:I am",
                                            "literal:years old",
                                            "literal:young, not old."
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  20,
                          "isSolve":  0,
                          "questions":  "Store a float value in a variable and print it.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:float"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  21,
                          "isSolve":  0,
                          "questions":  "Declare a = 5, b = 3. Print their sum.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:add",
                                            "var:a",
                                            "var:b",
                                            "literal:5",
                                            "literal:3"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  22,
                          "isSolve":  0,
                          "questions":  "Declare a = 29, b = 30. Print their difference.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:sub",
                                            "var:a",
                                            "var:b",
                                            "literal:29",
                                            "literal:30"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  23,
                          "isSolve":  0,
                          "questions":  "Declare a = 98, b = 67. Print their product.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:mul",
                                            "var:a",
                                            "var:b",
                                            "literal:98",
                                            "literal:67"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  24,
                          "isSolve":  0,
                          "questions":  "Declare a = 45, b = 24. Print their quotient.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:div",
                                            "var:a",
                                            "var:b",
                                            "literal:45",
                                            "literal:24"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  25,
                          "isSolve":  0,
                          "questions":  "Print: 5 + 3 = 8.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:add",
                                            "literal:5",
                                            "literal:3",
                                            "literal:8",
                                            "format:equation"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  26,
                          "isSolve":  0,
                          "questions":  "Print: 5 - 3 = 2.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:sub",
                                            "literal:5",
                                            "literal:3",
                                            "literal:2",
                                            "format:equation"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  27,
                          "isSolve":  0,
                          "questions":  "Print: 5 * 3 = 15.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:mul",
                                            "literal:5",
                                            "literal:3",
                                            "literal:15",
                                            "format:equation"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  28,
                          "isSolve":  0,
                          "questions":  "Print: 5 / 3 = 1.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:div",
                                            "literal:5",
                                            "literal:3",
                                            "literal:1",
                                            "format:equation"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  29,
                          "isSolve":  0,
                          "questions":  "Use the variable x = 12, and the variable y = 4. Print their sum.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:add",
                                            "var:x",
                                            "var:y",
                                            "literal:12",
                                            "literal:4"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  30,
                          "isSolve":  0,
                          "questions":  "Use the variable x = 23, and the variable y = 76. Print their difference.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:sub",
                                            "var:x",
                                            "var:y",
                                            "literal:23",
                                            "literal:76"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  31,
                          "isSolve":  0,
                          "questions":  "Use the variable x = 120, and the variable y = 10. Print their product.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:mul",
                                            "var:x",
                                            "var:y",
                                            "literal:120",
                                            "literal:10"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  32,
                          "isSolve":  0,
                          "questions":  "Use the variable x = 190, and the variable y = 56. Print their quotient.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:div",
                                            "var:x",
                                            "var:y",
                                            "literal:190",
                                            "literal:56"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  33,
                          "isSolve":  0,
                          "questions":  "Create three variables a, b and c and print their total sum.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:3",
                                            "op:add",
                                            "var:a",
                                            "var:b",
                                            "var:c"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  34,
                          "isSolve":  0,
                          "questions":  "Create three variables x, y and z and print their average.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:3",
                                            "op:add",
                                            "op:div",
                                            "var:x",
                                            "var:y",
                                            "var:z",
                                            "format:average"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  35,
                          "isSolve":  0,
                          "questions":  "Print the result of (10 + 2) using variables.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:add",
                                            "literal:10",
                                            "literal:2"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  36,
                          "isSolve":  0,
                          "questions":  "Print the result of (10 - 2) using variables.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:sub",
                                            "literal:10",
                                            "literal:2"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  37,
                          "isSolve":  0,
                          "questions":  "Print the result of (10 * 2) using variables.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:mul",
                                            "literal:10",
                                            "literal:2"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  38,
                          "isSolve":  0,
                          "questions":  "Print the result of (10 / 2) using variables.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:div",
                                            "literal:10",
                                            "literal:2"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  39,
                          "isSolve":  0,
                          "questions":  "Print the answer of (20 + 5) - 3 using variables (remember the PEMDAS).",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:add",
                                            "op:sub",
                                            "literal:20",
                                            "literal:5",
                                            "literal:3",
                                            "format:order_of_ops"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  40,
                          "isSolve":  0,
                          "questions":  "Print the answer of (6 * 2) + 4 using variables (remember the PEMDAS).",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:mul",
                                            "op:add",
                                            "literal:6",
                                            "literal:2",
                                            "literal:4",
                                            "format:order_of_ops"
                                        ],
                          "chance":  0.35
                      },
                      {
                          "id":  41,
                          "isSolve":  0,
                          "questions":  "Print the answer of (10 + 20) / 2 using variables (remember the PEMDAS).",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:add",
                                            "op:div",
                                            "literal:10",
                                            "literal:20",
                                            "literal:2",
                                            "format:order_of_ops"
                                        ],
                          "chance":  0.55
                      },
                      {
                          "id":  42,
                          "isSolve":  0,
                          "questions":  "Print the answer of (15 - 5) * 3 using variables (remember the PEMDAS).",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:sub",
                                            "op:mul",
                                            "literal:15",
                                            "literal:5",
                                            "literal:3",
                                            "format:order_of_ops"
                                        ],
                          "chance":  0.55
                      },
                      {
                          "id":  43,
                          "isSolve":  0,
                          "questions":  "Print the answer of (8 / 2) + 7 using variables (remember the PEMDAS).",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:div",
                                            "op:add",
                                            "literal:8",
                                            "literal:2",
                                            "literal:7",
                                            "format:order_of_ops"
                                        ],
                          "chance":  0.55
                      },
                      {
                          "id":  44,
                          "isSolve":  0,
                          "questions":  "Print the result of 7 * 7 using variables.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:mul",
                                            "literal:7",
                                            "literal:7"
                                        ],
                          "chance":  0.55
                      },
                      {
                          "id":  45,
                          "isSolve":  0,
                          "questions":  "Print the result of 9 + 9 using variables.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:add",
                                            "literal:9",
                                            "literal:9"
                                        ],
                          "chance":  0.55
                      },
                      {
                          "id":  46,
                          "isSolve":  0,
                          "questions":  "Print the result of 100 - 25 using variables.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:sub",
                                            "literal:100",
                                            "literal:25"
                                        ],
                          "chance":  0.55
                      },
                      {
                          "id":  47,
                          "isSolve":  0,
                          "questions":  "Print the result of 50 / 5 using variables.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:div",
                                            "literal:50",
                                            "literal:5"
                                        ],
                          "chance":  0.55
                      },
                      {
                          "id":  48,
                          "isSolve":  0,
                          "questions":  "Print the result of 6 + 4 * 2 using variables.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:add",
                                            "op:mul",
                                            "literal:6",
                                            "literal:4",
                                            "literal:2",
                                            "format:order_of_ops"
                                        ],
                          "chance":  0.55
                      },
                      {
                          "id":  49,
                          "isSolve":  0,
                          "questions":  "Print the result of (6 + 4) * 2 using variables.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:add",
                                            "op:mul",
                                            "literal:6",
                                            "literal:4",
                                            "literal:2",
                                            "format:parentheses"
                                        ],
                          "chance":  0.55
                      },
                      {
                          "id":  50,
                          "isSolve":  0,
                          "questions":  "Print the result of (20 / 2) + (3 * 4) using variables.",
                          "keyPoints":  [
                                            "needs:print",
                                            "needs:int:2",
                                            "op:div",
                                            "op:mul",
                                            "op:add",
                                            "literal:20",
                                            "literal:2",
                                            "literal:3",
                                            "literal:4",
                                            "format:order_of_ops"
                                        ],
                          "chance":  0.55
                      }
                  ]
    },
    "level2": {
        "questionArray": [
            {
                "id": 201,
                "isSolve": 0,
                "questions": "Declare a boolean variable named isPrinted, initialize its value to be 'true'. Then, create a condition that prints 'It is printed.' if it's true, and 'It is not printed.' elsewise.",
                "keyPoints": [
                    "needs:boolean",
                    "needs:if",
                    "needs:else",
                    "needs:print",
                    "var:isPrinted",
                    "literal:true",
                    "literal:It is printed.",
                    "literal:It is not printed."
                ],
                "chance": 0.5
            },
            {
                "id": 202,
                "isSolve": 0,
                "questions": "Declare int variables named budget and price and initialize their values to be 100 and 90 respectively. Then, create a condition that prints 'Budget is greater than price. Buy it.' if budget is greater than price and 'Budget is lower than price. Don't buy it.' elsewise.",
                "keyPoints": [
                    "needs:int:2",
                    "needs:if",
                    "needs:else",
                    "needs:print",
                    "comparison:>",
                    "var:budget",
                    "var:price",
                    "literal:100",
                    "literal:90",
                    "literal:Budget is greater than price. Buy it.",
                    "literal:Budget is lower than price. Don't buy it."
                ],
                "chance": 0.5
            },
            {
                "id": 203,
                "isSolve": 0,
                "questions": "Create a program that determines whether the double variable named pi with a value of 31.4 is equal to 3.14.",
                "keyPoints": [
                    "needs:double",
                    "needs:if",
                    "needs:print",
                    "comparison:==",
                    "var:pi",
                    "literal:31.4",
                    "literal:3.14"
                ],
                "chance": 0.45
            },
            {
                "id": 204,
                "isSolve": 0,
                "questions": "Declare int variables named studentA, studentB and studentC and initialize their variables as 90, 75, 60. Then, create a condition where students with grades greater than 75 would print 'Mastered Java Fundamentals.', students with grades equal to 75 would print 'Knew Java Fundamentals.' and students with grades less than 75 would print 'Failed Java Fundamentals.'",
                "keyPoints": [
                    "needs:int:3",
                    "needs:if",
                    "needs:else_if",
                    "needs:else",
                    "needs:print",
                    "comparison:>",
                    "comparison:==",
                    "comparison:<",
                    "var:studentA",
                    "var:studentB",
                    "var:studentC",
                    "literal:90",
                    "literal:75",
                    "literal:60",
                    "literal:Mastered Java Fundamentals.",
                    "literal:Knew Java Fundamentals.",
                    "literal:Failed Java Fundamentals."
                ],
                "chance": 0.45
            },
            {
                "id": 205,
                "isSolve": 0,
                "questions": "Declare an int variable named daysOfTheWeek. Then, use a switch case with 7 cases that contain each day of the week, from Monday to Sunday, and print them.",
                "keyPoints": [
                    "needs:int:1",
                    "needs:switch",
                    "needs:print",
                    "var:daysOfTheWeek",
                    "cases:7",
                    "literal:Monday",
                    "literal:Sunday"
                ],
                "chance": 0.45
            },
            {
                "id": 206,
                "isSolve": 0,
                "questions": "Declare a random number and store it in a variable named number with an int data type then create a condition that prints 'Number is positive' if the number is positive, 'Number is negative.' if the number is negative and 'Number is zero.' if the number is zero.",
                "keyPoints": [
                    "needs:int:1",
                    "var:number",
                    "needs:if",
                    "needs:else_if",
                    "needs:else",
                    "needs:print",
                    "comparison:>",
                    "comparison:<",
                    "comparison:==",
                    "literal:Number is positive",
                    "literal:Number is negative.",
                    "literal:Number is zero."
                ],
                "chance": 0.5
            },
            {
                "id": 207,
                "isSolve": 0,
                "questions": "Declare a random number and store it in an int variable called typedPassword, then create a condition that validates if the typedPassword is just like the another int variable named password which had a value of 09112001. Elsewise, return an invalid message.",
                "keyPoints": [
                    "needs:int:2",
                    "needs:if",
                    "needs:print",
                    "comparison:==",
                    "var:anotherPassword",
                    "var:password"
                ],
                "chance": 0.5
            },
            {
                "id": 208,
                "isSolve": 0,
                "questions": "Create a conditional statement that prints true or false after validating the logical expression a > b && c < a.",
                "keyPoints": [
                    "needs:int:3",
                    "needs:logical_and",
                    "needs:comparison",
                    "needs:print",
                    "var:a",
                    "var:b",
                    "var:c",
                    "comparison:>",
                    "comparison:<"
                ],
                "chance": 0.45
            },
            {
                "id": 209,
                "isSolve": 0,
                "questions": "Declare random numbers, subtract the two numbers then create a condition that prints 'Number is positive' if the difference is positive, 'Number is negative.' if the difference is negative and 'Number is zero.' if the difference is zero.",
                "keyPoints": [
                    "op:sub",
                    "needs:if",
                    "needs:else_if",
                    "needs:else",
                    "needs:print",
                    "literal:Number is positive",
                    "literal:Number is negative.",
                    "literal:Number is zero."
                ],
                "chance": 0.45
            },
            {
                "id": 210,
                "isSolve": 0,
                "questions": "Create a program and declare an int variable named year with a value 2077, then create a condition that determines if that year is a regular year or a leap year, elsewise.",
                "keyPoints": [
                    "needs:int:1",
                    "needs:if",
                    "needs:else",
                    "needs:print",
                    "var:year",
                    "literal:2077",
                    "logic:leap_year"
                ],
                "chance": 0.45
            },
            {
                "id": 211,
                "isSolve": 0,
                "questions": "Declare an int variable named daysOfTheWeek and intialize its value to 1. Then, use a for-loop and switch case with 7 cases that contain each day of the week, from Monday to Sunday, and print them.",
                "keyPoints": [
                    "needs:for",
                    "needs:switch",
                    "needs:int:1",
                    "needs:print",
                    "var:daysOfTheWeek",
                    "range:1-7",
                    "cases:7",
                    "literal:Monday",
                    "literal:Sunday"
                ],
                "chance": 0.45
            },
            {
                "id": 212,
                "isSolve": 0,
                "questions": "Using a for-loop, create a program that prints numbers 1 to 20 in a reversed order.",
                "keyPoints": [
                    "needs:for",
                    "needs:int:1",
                    "needs:print",
                    "order:descending",
                    "range:20-1"
                ],
                "chance": 0.45
            },
            {
                "id": 213,
                "isSolve": 0,
                "questions": "Declare an int variable named evenNumbers that displays even numbers from 1 to 20 using a for loop.",
                "keyPoints": [
                    "needs:for",
                    "needs:int:1",
                    "needs:print",
                    "logic:even",
                    "range:1-20",
                    "op:mod",
                    "var:evenNumbers"
                ],
                "chance": 0.45
            },
            {
                "id": 214,
                "isSolve": 0,
                "questions": "Declare an int variable named evenNumbers that displays even numbers from 1 to 20 using a while loop.",
                "keyPoints": [
                    "needs:while",
                    "needs:int:1",
                    "needs:print",
                    "logic:even",
                    "range:1-20",
                    "op:mod",
                    "var:evenNumbers"
                ],
                "chance": 0.45
            },
            {
                "id": 215,
                "isSolve": 0,
                "questions": "Create a program and declare an int variable called number to hold the value 9. Afterwards, create a for-loop that displays the multiplication table of the number entered by the user.",
                "keyPoints": [
                    "needs:for",
                    "needs:int:1",
                    "needs:print",
                    "var:number",
                    "literal:9",
                    "format:multiplication_table",
                    "range:1-10"
                ],
                "chance": 0.45
            },
            {
                "id": 216,
                "isSolve": 0,
                "questions": "Print the statement 'First, we CORE! Then we BRINGER! Let's CORE BRINGER!' using a while loop 10 times.",
                "keyPoints": [
                    "needs:while",
                    "needs:int:1",
                    "needs:print",
                    "count:10",
                    "literal:First, we CORE! Then we BRINGER! Let's CORE BRINGER!"
                ],
                "chance": 0.45
            },
            {
                "id": 217,
                "isSolve": 0,
                "questions": "Create a countdown of 10 using while loop where in the end, it will print 'Core Bringer is awesome!'",
                "keyPoints": [
                    "needs:while",
                    "needs:int:1",
                    "needs:print",
                    "order:descending",
                    "range:10-1",
                    "literal:Core Bringer is awesome!"
                ],
                "chance": 0.45
            },
            {
                "id": 218,
                "isSolve": 0,
                "questions": "Using a loop, declare numbers and store them in an int variable called currentCount, then create a condition that validates if the currentCount is like the variable named count which had a value of 20, while printing the loop all the way until it hits 20.",
                "keyPoints": [
                    "needs:int:2",
                    "needs:while",
                    "needs:print",
                    "needs:if",
                    "var:currentCount",
                    "var:count",
                    "literal:20"
                ],
                "chance": 0.4
            },
            {
                "id": 219,
                "isSolve": 0,
                "questions": "Create a program that prints the numbers 1 to 20 with a loop and use if-else statements that prints 'Odd Number' beside the printed number if the number is an odd number, or prints 'Even Number' beside the printed number if the number is an even number.",
                "keyPoints": [
                    "needs:for",
                    "needs:int:1",
                    "needs:if",
                    "needs:else",
                    "needs:print",
                    "op:mod",
                    "logic:odd_even",
                    "range:1-20",
                    "literal:Odd Number",
                    "literal:Even Number"
                ],
                "chance": 0.45
            },
            {
                "id": 220,
                "isSolve": 0,
                "questions": "Create a program that prints the numbers 0 to 100 with a loop and use if-else statements to create conditions that count the number of even numbers and odd numbers.",
                "keyPoints": [
                    "needs:for",
                    "needs:int:2",
                    "needs:if",
                    "needs:else",
                    "needs:print",
                    "range:0-100",
                    "op:mod",
                    "var:evenCount",
                    "var:oddCount"
                ],
                "chance": 0.45
            }
        ]
    },
    "level3": {
        "questionArray": [
            {
                "id": 301,
                "isSolve": 0,
                "questions": "Using arrays, write a program that stores daily temperatures in a week and name the variables according to the days of the week, then create a logic that determines the average temperature in one week, which is then stored in a variable named weeklyAverageTemp.",
                "keyPoints": [
                    "needs:array:number",
                    "needs:for",
                    "needs:print",
                    "op:add",
                    "op:div",
                    "size:7",
                    "var:weeklyAverageTemp"
                ],
                "chance": 0.4
            },
            {
                "id": 302,
                "isSolve": 0,
                "questions": "Initialize an array that will store different item prices and an int variable named budget, then create a logic that calculates the total cost of all items and subtracts it to the budget, which will then be stored in a variable named change and print it.",
                "keyPoints": [
                    "needs:array:number",
                    "needs:int:1",
                    "needs:for",
                    "needs:print",
                    "op:add",
                    "op:sub",
                    "var:budget",
                    "var:change"
                ],
                "chance": 0.4
            },
            {
                "id": 303,
                "isSolve": 0,
                "questions": "Initialize an array that will store exam scores, up to five, then create a logic that determines which of the scores are the greatest. Print it along with the statement 'My highest exam score is: ' then your highest exam score.",
                "keyPoints": [
                    "needs:array:number",
                    "needs:for",
                    "needs:print",
                    "agg:max",
                    "size:5",
                    "literal:My highest exam score is:"
                ],
                "chance": 0.4
            },
            {
                "id": 304,
                "isSolve": 0,
                "questions": "Declare an array with a String data type that will store a list of the titles of your favorite songs, up to five. Print the array two times, one in the original order and one in a reversed order.",
                "keyPoints": [
                    "needs:array:string",
                    "needs:for",
                    "needs:print",
                    "size:5",
                    "order:original",
                    "order:reversed"
                ],
                "chance": 0.38
            },
            {
                "id": 305,
                "isSolve": 0,
                "questions": "Declare an array with an integer data type that will store the following numbers: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987. Then, create a logic that will count the even numbers in the array and print it.",
                "keyPoints": [
                    "needs:array:number",
                    "needs:for",
                    "needs:print",
                    "logic:even",
                    "op:mod",
                    "agg:count",
                    "literal:1",
                    "literal:987"
                ],
                "chance": 0.38
            },
            {
                "id": 306,
                "isSolve": 0,
                "questions": "Declare an array with an integer data type that will store the following numbers: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987. Then, create a logic that will count all the odd numbers in the array and add them all and print it.",
                "keyPoints": [
                    "needs:array:number",
                    "needs:for",
                    "needs:print",
                    "logic:odd",
                    "op:mod",
                    "op:add",
                    "agg:sum"
                ],
                "chance": 0.38
            },
            {
                "id": 307,
                "isSolve": 0,
                "questions": "Store these numbers in an array named grades that have an int data type: 60, 72, 89, 91, 78. Then, create a logic that will determine if a student has passed slightly or exceeded the passing grade of 75, else the student has failed slightly or sunk below the passing grade of 75. Afterwards, print each element in the array and display their results beside them.",
                "keyPoints": [
                    "needs:array:number",
                    "needs:for",
                    "needs:if",
                    "needs:else_if",
                    "needs:else",
                    "needs:print",
                    "comparison:>",
                    "comparison:==",
                    "comparison:<",
                    "var:grades",
                    "literal:75",
                    "literal:60",
                    "literal:72",
                    "literal:89",
                    "literal:91",
                    "literal:78"
                ],
                "chance": 0.4
            },
            {
                "id": 308,
                "isSolve": 0,
                "questions": "Store the numbers from 1 to 20 in an array of named numbers that have an int data type. Then, create a logic that will check if a target number stored in a variable exists in the array.",
                "keyPoints": [
                    "needs:array:number",
                    "needs:for",
                    "needs:print",
                    "search:linear",
                    "range:1-20",
                    "var:numbers",
                    "var:target"
                ],
                "chance": 0.4
            },
            {
                "id": 309,
                "isSolve": 0,
                "questions": "Initialize an array named firstTable with an int data type and store the numbers 1 to 10 inside it. Afterwards, declare an empty array named secondTable with an int data type. Then, create a logic that will store firstTable's elements to the secondTable, but it is doubled. (1 = 2. 2 = 4. 4 = 8 and so on.)",
                "keyPoints": [
                    "needs:array:number",
                    "needs:for",
                    "needs:print",
                    "op:mul",
                    "transform:map*2",
                    "var:firstTable",
                    "var:secondTable",
                    "range:1-10"
                ],
                "chance": 0.38
            },
            {
                "id": 310,
                "isSolve": 0,
                "questions": "Declare an array named firstTable with an int data type and store the numbers 1 to 10 inside it. Afterwards, create an empty array named secondTable with an int data type. Then, create a logic that will copy firstTable's elements to the secondTable.",
                "keyPoints": [
                    "needs:array:number",
                    "needs:for",
                    "needs:print",
                    "transform:copy",
                    "var:firstTable",
                    "var:secondTable",
                    "range:1-10"
                ],
                "chance": 0.38
            },
            {
                "id": 311,
                "isSolve": 0,
                "questions": "Using the join() String method, create a logic that will print: ‘C-O-R-E-B-R-I-N-G-E-R’.",
                "keyPoints": [
                    "needs:string|array:string",
                    "needs:print",
                    "method:join",
                    "literal:C-O-R-E-B-R-I-N-G-E-R"
                ],
                "chance": 0.4
            },
            {
                "id": 312,
                "isSolve": 0,
                "questions": "Using the length() String method, create a logic that will count how many characters are in the given sentence: 'My pen is mightier than sword, as long as it doesn't get cut.' Then, print the result.",
                "keyPoints": [
                    "needs:string",
                    "needs:print",
                    "method:length",
                    "literal:My pen is mightier than sword, as long as it doesn't get cut."
                ],
                "chance": 0.4
            },
            {
                "id": 313,
                "isSolve": 0,
                "questions": "Declare a String variable named name with the value of 'Mike Oxmaul'. Then, using for-loop, array and the split() String method, create a logic that will determine the initials of the name which are then printed out.",
                "keyPoints": [
                    "needs:string",
                    "needs:array:string",
                    "needs:for",
                    "needs:print",
                    "method:split",
                    "method:charAt",
                    "format:initials"
                ],
                "chance": 0.38
            },
            {
                "id": 314,
                "isSolve": 0,
                "questions": "Using the length() String method, declare a String variable named password with a value 'John was here.' then create a logic that will check if your password is 10 characters in length and print it, elsewise it will print that the password is short.",
                "keyPoints": [
                    "needs:string",
                    "needs:if",
                    "needs:else",
                    "needs:print",
                    "method:length",
                    "comparison:==",
                    "literal:10",
                    "var:password",
                    "literal:John was here."
                ],
                "chance": 0.38
            },
            {
                "id": 315,
                "isSolve": 0,
                "questions": "Using the toLowerCase() String method, length() String method, charAt() String method, and indexOf() String method, declare a String variable named title with the value 'Core Bringer' then create a logic that turns it into lowercase and counts how many vowels it has (A, E, I, O, U).",
                "keyPoints": [
                    "needs:string",
                    "needs:for",
                    "needs:print",
                    "method:toLowerCase",
                    "method:length",
                    "method:charAt",
                    "method:indexOf",
                    "var:title",
                    "literal:Core Bringer",
                    "logic:vowel_count"
                ],
                "chance": 0.38
            },
            {
                "id": 316,
                "isSolve": 0,
                "questions": "Using the toUpperCase() String method, create a logic that will convert the word 'corebringer' into all uppercase letters and print it.",
                "keyPoints": [
                    "needs:string",
                    "needs:print",
                    "method:toUpperCase",
                    "literal:corebringer"
                ],
                "chance": 0.38
            },
            {
                "id": 317,
                "isSolve": 0,
                "questions": "Using the reverse() String method, declare a String variable named palindrome with the value 'level' and initialize it as a new StringBuilder() where the word itself, the reverse() method and a converter method, toString(), will be found. After that, use the variable palindrome and the equals() String method to check if the word is a palindrome, elsewise not.",
                "keyPoints": [
                    "needs:string",
                    "needs:if",
                    "needs:else",
                    "needs:print",
                    "class:StringBuilder",
                    "method:reverse",
                    "method:toString",
                    "method:equals",
                    "var:palindrome",
                    "literal:level",
                    "logic:palindrome",
                    "var:reverse"
                ],
                "chance": 0.36
            },
            {
                "id": 318,
                "isSolve": 0,
                "questions": "Using the replace() String method, declare a String variable named statement that has the value ‘I am a bad person.’ and then use replace() to replace the word ‘bad’ with ‘good.’",
                "keyPoints": [
                    "needs:string",
                    "needs:print",
                    "method:replace",
                    "literal:I am a bad person.",
                    "literal:bad",
                    "literal:good"
                ],
                "chance": 0.36
            },
            {
                "id": 319,
                "isSolve": 0,
                "questions": "Using an array and the split() String method, declare a String variable named sentence with the value 'YEAH! LEEROY JENKINS!' then use split() to split the words and print each one on a new line.",
                "keyPoints": [
                    "needs:string",
                    "needs:array:string",
                    "needs:for",
                    "needs:print",
                    "method:split",
                    "format:lines"
                ],
                "chance": 0.36
            },
            {
                "id": 320,
                "isSolve": 0,
                "questions": "Using an array and the sort() Array method, store the names ‘Alex, John, Ben, Sophia, Mark, Dean’ in an array, then create a logic that will sort them alphabetically before printing the result.",
                "keyPoints": [
                    "needs:array:string",
                    "needs:print",
                    "method:Arrays.sort",
                    "data:names",
                    "order:ascending",
                    "literal:Alex",
                    "literal:John",
                    "literal:Ben",
                    "literal:Sophia",
                    "literal:Mark",
                    "literal:Dean"
                ],
                "chance": 0.36
            }
        ]
    },
    "level4": {
        "questionArray": [
            {
                "id": 401,
                "isSolve": 0,
                "questions": "Create a method sayHello(String name) that prints \"Hello, [name]! Let's continue fighting our way out as the Core Bringer!\" Then, call it to the main method, along with your own name.",
                "keyPoints": [
                    "needs:method",
                    "needs:string",
                    "needs:print",
                    "method:sayHello",
                    "param:String:name",
                    "literal:Hello",
                    "literal:Let's continue fighting our way out as the Core Bringer!",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 402,
                "isSolve": 0,
                "questions": "Create a method calculateDamage(int attack, int defense) that returns the final damage (attack - defense). Then, call it to the main method, print the damage dealt by calling the method and setting the parameters with the attack having an integer value of 9 and the defense having an integer value of 6.",
                "keyPoints": [
                    "needs:method",
                    "needs:int:2",
                    "needs:print",
                    "method:calculateDamage",
                    "param:int:attack",
                    "param:int:defense",
                    "return:int",
                    "operation:subtract",
                    "value:9",
                    "value:6",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 403,
                "isSolve": 0,
                "questions": "Create a subclass named Pet with variables named name with a String value \"John\" and species with a String value \"dog\". Then, in the main method, make an object of Pet and print. Output should be: \"John looks like a dog, not going to lie.\"",
                "keyPoints": [
                    "needs:class",
                    "needs:string:2",
                    "needs:object",
                    "needs:print",
                    "class:Pet",
                    "var:name",
                    "var:species",
                    "literal:John",
                    "literal:dog",
                    "literal:John looks like a dog, not going to lie.",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 404,
                "isSolve": 0,
                "questions": "Create a subclass named BankAccount with a private double variable named balance, a setter method named setBalance() with a logic that accepts any amount if amount is greater than zero which elsewise will not be accepted, then a getter method named getBalance() that returns the balance and shows its current amount. Then, call the getter method at the main method.",
                "keyPoints": [
                    "needs:class",
                    "needs:double:1",
                    "needs:method:2",
                    "needs:private",
                    "needs:if",
                    "class:BankAccount",
                    "var:balance",
                    "method:setBalance",
                    "method:getBalance",
                    "return:double",
                    "condition:greater_than_zero",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 405,
                "isSolve": 0,
                "questions": "Create a subclass named Student with variables named name and gradeLevel, and inside, create a constructor that sets both as the constructor's parameters and return variables inside the constructor. Now, in the main class, create an object for the constructor, along with your name for the value of the name variable, and 11 for the value of the gradeLevel variable inside the constructor parameter.",
                "keyPoints": [
                    "needs:class",
                    "needs:constructor",
                    "needs:string:1",
                    "needs:int:1",
                    "needs:object",
                    "class:Student",
                    "var:name",
                    "var:gradeLevel",
                    "param:String:name",
                    "param:int:gradeLevel",
                    "value:11",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 406,
                "isSolve": 0,
                "questions": "Create a subclass named Player and inside it is a String variable named name and an int variable named level, alongside two constructors of the same name of the subclass. The difference is that the first Player constructor will only have a single parameter and return variable, being the name, but the second Player constructor will have both the name and level as parameters and return variables. Then afterwards, on the main class, create objects for the constructors, with playerOne taking the first Player constructor, and playerTwo taking the second. Put your name of choice for the constructors, and a level of your choice for only the second constructor. Then, print them.",
                "keyPoints": [
                    "needs:class",
                    "needs:constructor:2",
                    "needs:string:1",
                    "needs:int:1",
                    "needs:object:2",
                    "needs:print",
                    "class:Player",
                    "var:name",
                    "var:level",
                    "overload:constructor",
                    "object:playerOne",
                    "object:playerTwo",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 407,
                "isSolve": 0,
                "questions": "Create a class Juice with a public method drink() that prints \"You take a sip of juice.\" and a private method secretIngredient() that prints \"Mango essence.\" Then, at the main method, create an object that calls only the drink() method. Take note that it's because the private access modifier needs a setter and getter method to be called properly to not get an error, different than the public access modifier.",
                "keyPoints": [
                    "needs:class",
                    "needs:method:2",
                    "needs:public",
                    "needs:private",
                    "needs:object",
                    "needs:print",
                    "class:Juice",
                    "method:drink",
                    "method:secretIngredient",
                    "literal:You take a sip of juice.",
                    "literal:Mango essence.",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 408,
                "isSolve": 0,
                "questions": "Create a subclass named DiceRoller with a method named roll() that returns a random number between 1 and 6 using Math.random(). In the main method, print the result of three rolls.",
                "keyPoints": [
                    "needs:class",
                    "needs:method",
                    "needs:print",
                    "needs:math",
                    "class:DiceRoller",
                    "method:roll",
                    "return:int",
                    "method:Math.random",
                    "range:1_to_6",
                    "repeat:3",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 409,
                "isSolve": 0,
                "questions": "Create a method named calculateSpeed(double distance, double time) which calculates distance divided by time (distance / time). In the main method, calculate the speed of a car that traveled 250 km in 5 hours.",
                "keyPoints": [
                    "needs:method",
                    "needs:double:2",
                    "needs:print",
                    "method:calculateSpeed",
                    "param:double:distance",
                    "param:double:time",
                    "return:double",
                    "operation:divide",
                    "value:250",
                    "value:5",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 410,
                "isSolve": 0,
                "questions": "Create a subclass named Friend, along with a String attribute/variable named name inside it. Then inside, create a constructor which references the name variable. In the main class, create an object for the Friend method and put \"Mark\" inside its parameter parenthesis. Then, create another object for the Friend method, but this time, reference the second object to the first object (obj2 = obj1). Then, change the reference value of the first object to \"Martin\" then print the first object and second object. The expected output would be that the first object will have \"Martin\", and the second object will have \"Mark\".",
                "keyPoints": [
                    "needs:class",
                    "needs:constructor",
                    "needs:string:1",
                    "needs:object:2",
                    "needs:print",
                    "class:Friend",
                    "var:name",
                    "literal:Mark",
                    "literal:Martin",
                    "reference:object",
                    "assignment:obj2_equals_obj1",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 411,
                "isSolve": 0,
                "questions": "Create a subclass named RamenBowl, and inside is a private int variable named temperature, a setter named setTemperature(int t) that only allows values if its between 50 to 100 or it will get rejected elsewise, then a getter named getTemperature() that returns it. Afterwards, in the main class, create an object of the RamenBowl class and call it to set its temperature values with valid and invalid temps before printing.",
                "keyPoints": [
                    "needs:class",
                    "needs:int:1",
                    "needs:method:2",
                    "needs:private",
                    "needs:if",
                    "needs:object",
                    "needs:print",
                    "class:RamenBowl",
                    "var:temperature",
                    "method:setTemperature",
                    "method:getTemperature",
                    "range:50_to_100",
                    "validation:temperature",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 412,
                "isSolve": 0,
                "questions": "Create a method named greet(String name, String timeOfDay) that returns a string like: \"Good Morning, Player Mark! Continue your adventure as the Core Bringer!\" to the main method.",
                "keyPoints": [
                    "needs:method",
                    "needs:string:2",
                    "needs:print",
                    "method:greet",
                    "param:String:name",
                    "param:String:timeOfDay",
                    "return:String",
                    "literal:Good Morning",
                    "literal:Player",
                    "literal:Continue your adventure as the Core Bringer!",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 413,
                "isSolve": 0,
                "questions": "Create a subclass named MathHelper with a static method square(int num) that returns the square (means any number multiplied by itself). Then, call it from the main method, without creating an object.",
                "keyPoints": [
                    "needs:class",
                    "needs:method",
                    "needs:static",
                    "needs:int:1",
                    "needs:print",
                    "class:MathHelper",
                    "method:square",
                    "param:int:num",
                    "return:int",
                    "operation:multiply",
                    "no_object_creation",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 414,
                "isSolve": 0,
                "questions": "Create a subclass named Player with a static int variable named playerCount which has a value of 0 and a variable named name. Then, create a constructor named similarly to the subclass, which obtains the name variable and increments (increases) the value of the playerCount every time a player is created. (means the more it is called). Then, simply call them on the main method, using only the statement new Player() followed by a random name of your choice inside the parameter parenthesis, up to three. Then, print the total players.",
                "keyPoints": [
                    "needs:class",
                    "needs:constructor",
                    "needs:static",
                    "needs:int:1",
                    "needs:string:1",
                    "needs:object:3",
                    "needs:print",
                    "class:Player",
                    "var:playerCount",
                    "var:name",
                    "value:0",
                    "operation:increment",
                    "repeat:3",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 415,
                "isSolve": 0,
                "questions": "Create a subclass named GameSettings with a final int variable named MAX_PLAYERS with a value of 5. Then, at the main class, create an object for the subclass and call the method to print the number of players. However, take note that variables with the final keyword cannot be changed at all unless you manually change it on the code.",
                "keyPoints": [
                    "needs:class",
                    "needs:final",
                    "needs:int:1",
                    "needs:object",
                    "needs:print",
                    "class:GameSettings",
                    "var:MAX_PLAYERS",
                    "value:5",
                    "immutable:final",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 416,
                "isSolve": 0,
                "questions": "Create a subclass named Account and initialize private attributes (variables) named 'name' of the String data type and balance of the double data type inside it. Then continuing inside, create a constructor named similarly to the subclass that takes the variables name and balance to its parameter parenthesis, and afterwards, create methods named deposit(double amount) with a logic that will add amount to the balance and print it, and withdraw(double amount) with a logic that will subtract amount from the balance for withdrawal and print it, with a condition that which will let you withdraw if there's still enough left in the balance, elsewise, it will prevent the user and print a warning as there will be not enough amount in the balance. Then, at the main class, create an object of the Account subclass and place any random name and any random number for balance on the parameter parenthesis. Then, call the deposit and withdraw methods many times until the balance is exhausted.",
                "keyPoints": [
                    "needs:class",
                    "needs:constructor",
                    "needs:method:2",
                    "needs:private",
                    "needs:string:1",
                    "needs:double:1",
                    "needs:if",
                    "needs:object",
                    "needs:print",
                    "class:Account",
                    "var:name",
                    "var:balance",
                    "method:deposit",
                    "method:withdraw",
                    "operation:add",
                    "operation:subtract",
                    "validation:balance",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 417,
                "isSolve": 0,
                "questions": "Create a subclass named Monster, and inside it is the attributes (variables) name (String) and hp (int), alongside a constructor named similarly to the subclass with the same attributes in its body and parameter parenthesis. Then, create a method named takeDamage(int dmg) that subtracts hp by the amount of damage and prints it. Then, in the main class, create two objects for the constructor and make them attack each other using the takeDamage() method.",
                "keyPoints": [
                    "needs:class",
                    "needs:constructor",
                    "needs:method",
                    "needs:string:1",
                    "needs:int:1",
                    "needs:object:2",
                    "needs:print",
                    "class:Monster",
                    "var:name",
                    "var:hp",
                    "method:takeDamage",
                    "param:int:dmg",
                    "operation:subtract",
                    "interaction:attack",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 418,
                "isSolve": 0,
                "questions": "Create a subclass named Character, and inside it are the attributes (variables) name (String) and power (int). Then inside it, create a constructor with the same name as the subclass and set the attributes in the parameter parenthesis and body of the constructor. Next, create a method named train() alongside an int variable named gain that has the logic of increasing power randomly between 5–15 using Math.random(). The amount the gain given will then be added to the power before printing the result. Lastly, in the main class, make a character by creating an object of the constructor, inputting a random name and any amount of power in the parameter, then calling the method train() three times.",
                "keyPoints": [
                    "needs:class",
                    "needs:constructor",
                    "needs:method",
                    "needs:string:1",
                    "needs:int:2",
                    "needs:math",
                    "needs:object",
                    "needs:print",
                    "class:Character",
                    "var:name",
                    "var:power",
                    "var:gain",
                    "method:train",
                    "method:Math.random",
                    "range:5_to_15",
                    "operation:add",
                    "repeat:3",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 419,
                "isSolve": 0,
                "questions": "Create a subclass named Phone, and inside it are the private attributes brand (String) and batteryLevel (int). Then continuing inside it, create a constructor with the similar name to the class as well as setting the same private attribute on its parameter and body, with the brand settling on its parameters and body and only batteryLevel only settling at the body starting at 100 (since it's default/fixed amount). Then, create a method named use() that has the logic of reducing batteryLevel by random between 10–30% then printing how much battery was used. Afterwards, in the main class, create an object for the constructor and input any brand on the constructor, then call the use() method.",
                "keyPoints": [
                    "needs:class",
                    "needs:constructor",
                    "needs:method",
                    "needs:private",
                    "needs:string:1",
                    "needs:int:1",
                    "needs:math",
                    "needs:object",
                    "needs:print",
                    "class:Phone",
                    "var:brand",
                    "var:batteryLevel",
                    "method:use",
                    "value:100",
                    "method:Math.random",
                    "range:10_to_30",
                    "operation:subtract",
                    "call:main"
                ],
                "chance": 0.40
            },
            {
                "id": 420,
                "isSolve": 0,
                "questions": "Create a subclass named Hero, and inside it is the attributes name (String), hp (int), and attack (int), then create a constructor in the same subclass, with the same attributes for the parameter parenthesis and same setting for the constructor body. Afterwards, create another subclass, this time named Monster, and inside it is the attributes name (String), hp (int), and attack (int). Both of their attack() methods of the subclasses has a logic that reduces the other's hp using random damage from Math.random() and prints all the results from the damage taken and HP reduced on each side. Then, in the main class, create objects for the constructors and fill up their parameters with any name, any amount of HP that isn't negative or 0, and any amount of damage. Afterwards, using a while loop with a condition that the loop will continue while both (&& logic) sides has HP values greater than 0, simulate a few turns and print the results each round, where the hero uses its attack() to attack the monster and the monster to use its attack() to attack the hero in alternating turns. Print whether the hero OR the monster wins.",
                "keyPoints": [
                    "needs:class:2",
                    "needs:constructor:2",
                    "needs:method:2",
                    "needs:string:2",
                    "needs:int:6",
                    "needs:math",
                    "needs:while",
                    "needs:object:2",
                    "needs:print",
                    "class:Hero",
                    "class:Monster",
                    "var:name",
                    "var:hp",
                    "var:attack",
                    "method:attack",
                    "method:Math.random",
                    "condition:hp_greater_than_zero",
                    "logic:and",
                    "alternating:turns",
                    "winner:determination",
                    "call:main"
                ],
                "chance": 0.40
            }
        ]
    }
}
